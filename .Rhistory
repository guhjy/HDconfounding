ssl$TreatEffect
covs = 1:3
outMod = glm(y ~ t + x[,covs], family=binomial(link="probit"))
pMod = glm(t ~ x[,covs], family=binomial(link="probit"))
eHat = pMod$fitted.values
muHat1 = pnorm(cbind(rep(1,n), rep(1,n), x[,covs]) %*% outMod$coefficients)
muHat0 = pnorm(cbind(rep(1,n), rep(0,n), x[,covs]) %*% outMod$coefficients)
part1 = mean(t*y/eHat - (t - eHat)*muHat1/eHat)
part2 = mean((1 - t)*y/(1 - eHat) - (t - eHat)*muHat0/(1 - eHat))
covs = 1:3
outMod = glm(y ~ t + x[,covs], family=binomial(link="probit"))
covs = 1:3
outMod = glm(y ~ z + x[,covs], family=binomial(link="probit"))
pMod = glm(t ~ x[,covs], family=binomial(link="probit"))
eHat = pMod$fitted.values
muHat1 = pnorm(cbind(rep(1,n), rep(1,n), x[,covs]) %*% outMod$coefficients)
muHat0 = pnorm(cbind(rep(1,n), rep(0,n), x[,covs]) %*% outMod$coefficients)
part1 = mean(z*y/eHat - (z - eHat)*muHat1/eHat)
part2 = mean((1 - z)*y/(1 - eHat) - (z - eHat)*muHat0/(1 - eHat))
outMod = glm(y ~ z + x[,covs], family=binomial(link="probit"))
pMod = glm(t ~ x[,covs], family=binomial(link="probit"))
pMod = glm(z ~ x[,covs], family=binomial(link="probit"))
eHat = pMod$fitted.values
muHat1 = pnorm(cbind(rep(1,n), rep(1,n), x[,covs]) %*% outMod$coefficients)
muHat0 = pnorm(cbind(rep(1,n), rep(0,n), x[,covs]) %*% outMod$coefficients)
part1 = mean(z*y/eHat - (z - eHat)*muHat1/eHat)
part2 = mean((1 - z)*y/(1 - eHat) - (z - eHat)*muHat0/(1 - eHat))
part1 - part2
outMod
est2 = rep(NA, 100)
mean(pnorm(cbind(rep(1,n), rep(1,n), x[,covs]) %*% outMod$coefficients) -
pnorm(cbind(rep(1,n), rep(0,n), x[,covs]) %*% outMod$coefficients))
est = rep(NA, 100)
est2 = rep(NA, 100)
for (i in 1 : 100) {
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
covs = 1:3
outMod = glm(y ~ z + x[,covs], family=binomial(link="probit"))
pMod = glm(z ~ x[,covs], family=binomial(link="probit"))
eHat = pMod$fitted.values
muHat1 = pnorm(cbind(rep(1,n), rep(1,n), x[,covs]) %*% outMod$coefficients)
muHat0 = pnorm(cbind(rep(1,n), rep(0,n), x[,covs]) %*% outMod$coefficients)
part1 = mean(z*y/eHat - (z - eHat)*muHat1/eHat)
part2 = mean((1 - z)*y/(1 - eHat) - (z - eHat)*muHat0/(1 - eHat))
est[i] = part1 - part2
est2[i] = mean(pnorm(cbind(rep(1,n), rep(1,n), x[,covs]) %*% outMod$coefficients) -
pnorm(cbind(rep(1,n), rep(0,n), x[,covs]) %*% outMod$coefficients))
}
mean(est)
mean(est2)
ssl$TreatEffectCI
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2)
ls(ssl)
ssl$TreatEffect
ssl$TreatEffectCI
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2)
ssl$TreatEffect
ssl$TreatEffectCI
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2)
ssl$TreatEffectCI
ssl$TreatEffect
n
p
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2)
ssl$TreatEffectCI
covs = 1:3
outMod = glm(y ~ z + x[,covs], family=binomial(link="probit"))
pMod = glm(z ~ x[,covs], family=binomial(link="probit"))
eHat = pMod$fitted.values
muHat1 = pnorm(cbind(rep(1,n), rep(1,n), x[,covs]) %*% outMod$coefficients)
muHat0 = pnorm(cbind(rep(1,n), rep(0,n), x[,covs]) %*% outMod$coefficients)
part1 = mean(z*y/eHat - (z - eHat)*muHat1/eHat)
part2 = mean((1 - z)*y/(1 - eHat) - (z - eHat)*muHat0/(1 - eHat))
part1 - part2
mean(pnorm(cbind(rep(1,n), rep(1,n), x[,covs]) %*% outMod$coefficients) -
pnorm(cbind(rep(1,n), rep(0,n), x[,covs]) %*% outMod$coefficients))
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2, lambda0=25, weight=0.01)
ssl$TreatEffectCI
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2, lambda0=5, weight=0.01)
ssl$TreatEffectCI
outMod = glm(y ~ z + x[,covs], family=binomial(link="probit"))
mean(pnorm(cbind(rep(1,n), rep(1,n), x[,covs]) %*% outMod$coefficients) -
pnorm(cbind(rep(1,n), rep(0,n), x[,covs]) %*% outMod$coefficients))
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2, lambda0=25, weight=0.01)
ssl$TreatEffectCI
outMod = glm(y ~ z + x[,covs], family=binomial(link="probit"))
mean(pnorm(cbind(rep(1,n), rep(1,n), x[,covs]) %*% outMod$coefficients) -
pnorm(cbind(rep(1,n), rep(0,n), x[,covs]) %*% outMod$coefficients))
ssl$TreatEffect
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLheteroBinary(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2, lambda0=25, weight=0.01)
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLheteroBinary(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2, lambda0=25, weight=0.01)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2, lambda0=25, weight=0.01)
ssl$TreatEffect
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLheteroBinary(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2, lambda0=25, weight=0.01)
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLheteroBinary(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2, lambda0=25, weight=0.01)
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLhetero(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2, lambda0=25, weight=0.01)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLheteroBinary(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2, lambda0=25, weight=0.01)
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSL(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, lambda0=25, weight=0.01)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLhetero(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, lambda0=25, weight=0.01)
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLhetero(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, lambda0=25, weight=0.01)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLhetero(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSL(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, lambda0=25, weight=0.01)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLheteroBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, lambda0=25, weight=0.01)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLheteroBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLheteroBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
ssl
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLheteroBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, lambda0=15, weight=0.01)
ssl
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, lambda0=15, weight=0.01)
ssl$TreatEffect
ssl$TreatEffectCI
ssl = SSLheteroBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, lambda0=15, weight=0.01)
ssl$TreatEffectCI
?SSLheteroBinary
ls
ls()
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rnorm(n, mean=z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3])
ssl = SSL(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rnorm(n, mean=z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3])
ssl = SSL(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rnorm(n, mean=z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3])
ssl = SSL(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rnorm(n, mean=z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3])
ssl = SSL(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
ls(ssl)
ssl$betaPostCI
ssl$TreatEffect
ssl$TreatEffectCI
ssl$lambda0vec
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rnorm(n, mean=z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3])
ssl = SSL(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
ssl$TreatEffect
ssl$TreatEffectCI
ssl$lambda0vec
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rnorm(n, mean=z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3])
ssl = SSL(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rnorm(n, mean=z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3])
ssl = SSL(y=y, z=z, x=x, nScans=10000, burn=4000, thin=6)
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rnorm(n, mean=z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3])
ssl = SSL(y=y, z=z, x=x, nScans=2000, burn=2000, thin=6)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rnorm(n, mean=z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3])
ssl = SSL(y=y, z=z, x=x, nScans=2000, burn=1500, thin=6)
ssl$TreatEffect
ssl$TreatEffectCI
ls(ssl)
ssl$gammaPostMean
n
p
n=150
p=100
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rnorm(n, mean=z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3])
ssl = SSL(y=y, z=z, x=x, nScans=2000, burn=1000, thin=2)
ssl$TreatEffectCI
ssl$TreatEffect
ssl$gammaPostMean
n=200
p=10
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
ssl$TreatEffect
ssl$TreatEffectCI
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
n
p
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rnorm(n, mean=z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3])
ssl = SSLhetero(y=y, z=z, x=x, nScans=2000, burn=1000, thin=2)
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rnorm(n, mean=z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3])
ssl = SSLhetero(y=y, z=z, x=x, nScans=2000, burn=1000, thin=2)
ssl$TreatEffectCI
ssl$TreatEffect
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, lambda0=15, weight=0.01)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLheteroBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, lambda0=15, weight=0.01)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLhetero(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, lambda0=15, weight=0.01)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLo(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, lambda0=15, weight=0.01)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSL(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, lambda0=15, weight=0.01)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSL(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLhetero(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLheteroBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLheteroBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4)
n=200
p=200
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, EMiterMax=12)
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, EMiterMax=12)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, EMiterMax=20)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, EMiterMax=14)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, EMiterMax=15)
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rbinom(n, 1, p=pnorm(z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1))
ssl = SSLBinary(y=y, z=z, x=x, nScans=1000, burn=200, thin=4, EMiterMax=5)
library(devtools)
install_github(repo = "jantonelli111/Irregular2dWavelets")
library(Irregular2dWavelets)
?vignettes
vignettes(package="Irregular2dWavelets")
vignette(package="Irregular2dWavelets")
data(BostonPMsim)
head(BostonPMsim)
library(maps)
colors = colorRampPalette(c("yellow", "orange", "red"))
BostonPMsim$col = colors(100)[as.numeric(cut(BostonPMsim$pm,breaks = 100))]
map("state","massachusetts", xlim=range(BostonPMsim$long), ylim=range(BostonPMsim$lat))
points(BostonPMsim$long, BostonPMsim$lat, col=BostonPMsim$col, cex=.75)
install_github(repo = "jantonelli111/Irregular2dWavelets")
vignette(package="Irregular2dWavelets")
install_github(repo = "jantonelli111/Irregular2dWavelets", build_vignettes = TRUE)
force=TRUE
install_github(repo = "jantonelli111/Irregular2dWavelets", build_vignettes = TRUE, force=TRUE)
library(Irregular2dWavelets)
vignette(package="Irregular2dWavelets")
print(Irregular2dWavelets)
v = vignette(package="Irregular2dWavelets")
print(v)
vignette("Irregular2dWavelets", package="Irregular2dWavelets")
vignette("Irregular2dWavelets", package="Irregular2dWavelets")
Package <- function(g) {
library(devtools)
document(g)
build(g)
install(g)
}
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
ls(package="HDconfounding")
ls("package:HDconfounding")
?SSL
?SSLBinary
?SSLhetero
?SSLheteroBinary
?SSL
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
?SSLheteroBinary
Package <- function(g) {
library(devtools)
document(g)
build(g)
install(g)
}
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
?SSLheteroBinary
?SSLhetero
?SSL
Package <- function(g) {
library(devtools)
document(g)
build(g)
install(g)
}
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
?SSL
n = 200
p = 200
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rnorm(n, mean=z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1)
ssl = SSL(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2)
print(ssl$TreatEffect)
print(ssl$TreatEffectCI)
## Print the posterior inclusion probabilities for confounders
print(ssl$gammaPostMean)
Package <- function(g) {
library(devtools)
document(g)
build(g)
install(g)
}
Package("/Users/josephantonelli/Github/HDconfounding/")
library(HDconfounding)
?SSL
n = 200
p = 20
x = matrix(rnorm(n*p), n, p)
z = rbinom(n, 1, p=pnorm(0.7*x[,1] + 0.3*x[,2]))
y = rnorm(n, mean=z + 0.3*x[,1] + 0.6*x[,2] + 0.5*x[,3], sd=1)
ssl = SSL(y=y, z=z, x=x, nScans=3000, burn=1000, thin=2)
## Output treatment effect and credible interval
print(ssl$TreatEffect)
print(ssl$TreatEffectCI)
## Print the posterior inclusion probabilities for confounders
print(ssl$gammaPostMean)
setwd("Github/HDconfounding/")
devtools::use_vignette("HDconfounding")
Package <- function(g) {
library(devtools)
document(g)
build(g)
install(g)
}
Package("/Users/josephantonelli/Github/HDconfounding/")
vignette("HDconfounding")
library(HDconfounding)
vignette("HDconfounding")
vignette("HDconfounding", package="HDconfoundign")
vignette("HDconfounding", package="HDconfounding")
vignette(package="HDconfounding")
install_github(repo = "jantonelli111/HDconfounding", build_vignettes = TRUE)
vignette("HDconfounding", package="HDconfounding")
install_github(repo = "jantonelli111/HDconfounding", build_vignettes = TRUE)
vignette("HDconfounding", package="HDconfounding")
library(HDconfounding)
vignette("HDconfounding", package="HDconfounding")
vignette(package="HDconfounding")
install_github(repo = "jantonelli111/HDconfounding", build_vignettes = TRUE)
library(HDconfounding)
vignette(package="HDconfounding")
vignette("HDconfounding", package="HDconfounding")
